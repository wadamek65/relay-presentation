interface Node {
    id: ID!
}

type PageInfo {
    startCursor: String
    endCursor: String
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
}

type Message implements Node {
    id: ID!
    author: String!
    text: String!
    sentAt: String!
}

type MessageEdge {
    cursor: String!
    node: Message!
}

type MessageConnection {
    pageInfo: PageInfo!
    edges: [MessageEdge!]!
}

type Chat implements Node {
    id: ID!
    title: String!
    messages(first: Int, last: Int, after: String, before: String): MessageConnection!
}

input SendMessageInput {
    chatId: ID!
    author: String!
    text: String!
}

type SendMessagePayload {
    edge: MessageEdge!
}

type ChatUpdatesPayload {
    newMessage: Message!
}

type Viewer {
    chat(id: ID!): Chat!
}

type Query {
    chat(id: ID!): Chat!
    viewer: Viewer!
}

type Mutation {
    sendMessage(input: SendMessageInput!): SendMessagePayload!
}

type Subscription {
    chatUpdates(id: ID!): ChatUpdatesPayload
}
